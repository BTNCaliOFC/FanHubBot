const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
const https = require('https');
const csv = require('csv-parser');
const app = express();

// üîê Admin Setup
const ADMINS = ['5999791089'];
function isAdmin(userId) {
  return ADMINS.includes(userId.toString());
}

// üíæ User storage
const USERS_FILE = path.join(__dirname, 'users.json');
function saveUser(chatId) {
  let users = [];
  if (fs.existsSync(USERS_FILE)) {
    users = JSON.parse(fs.readFileSync(USERS_FILE));
  }
  if (!users.includes(chatId)) {
    users.push(chatId);
    fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
    console.log(`‚úÖ New user saved: ${chatId}`);
  }
}

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
console.log("üöÄ FanHubBot is starting...");

// Reply Keyboard
const mainMenuKeyboard = {
  reply_markup: {
    keyboard: [
      ['/menu', '/getchatid'],
      ['/profile', '/notifications'],
      ['/support', '/links']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// üåû Daily Morning Messages
const dailyMessagesByDay = {
  0: `üå§Ô∏è *Happy Sunday, Cali DreamKeeper!*\n\nTake time to recharge, but don‚Äôt forget ‚Äî your support fuels Cali‚Äôs dreams. üíô`,
  1: `üåü *Motivation Monday!*\n\nA new week, a new chance to shine ‚ú®`,
  2: `üí™ *Task-Focused Tuesday!*\n\nYou‚Äôve got what it takes to push Cali closer to debut üåç`,
  3: `üß† *Wisdom Wednesday*\n\nMidweek magic starts with one click!`,
  4: `üî• *Thriving Thursday!*\n\nAnother chance to grow, support, and lead üå±`,
  5: `üéâ *Feel-Good Friday!*\n\nEnd the week strong ‚Äî complete your tasks üíå`,
  6: `üåà *Supportive Saturday*\n\nTime to boost Cali with energy and votes ‚ö°`
};

// üåô Evening Check-Ins
const eveningCheckIns = [
  `üåô *How was your day, DreamKeeper?* We hope it was filled with joy and purpose. üíô`,
  `üí§ *Before you rest...* Just know that showing up matters. üåü`,
  `üåå *The stars are proud of you ‚Äî and so are we.* üíô Keep dreaming big.`,
  `üåå Time to slow down, Cali DreamKeeper. How was your day today?`,
  `üß∏ Hope your heart feels light tonight. Wanna share how your day went?`,
  `‚ú® Another day done! Sending hugs and good vibes your way. üíô`,
  `üí§ The stars are out. Take a moment for yourself tonight, you deserve it.`,
  `üåô It‚Äôs okay to have off days. Just know we‚Äôre proud of you, always.`,
  `üìñ Before the day ends, tell me one good thing that happened today.`,
  `üåÉ The night is calm and you‚Äôre safe here. How was your day, Cali DreamKeeper?`,
  `üïØÔ∏è Even small wins today count. You did great! Rest well later.`,
  `üí¨ Let‚Äôs end the day on a kind note. Want to tell me your highlight today?`,
  `ü´∂ You matter. Just checking in ‚Äî how are you really feeling tonight?`,
  `üõèÔ∏è Remember, it‚Äôs okay to take breaks. Even stars need to rest.`,
  `üå† Quiet nights are perfect for reflection. Did anything surprise you today?`,
  `üòå Another chapter ends today. Let‚Äôs write a better one tomorrow.`,
  `üíô Cali‚Äôs proud of you ‚Äî and so are we. Good night, DreamKeeper.`,
  `üåú Think of one thing that made you smile today. Hold on to it.`
];

const moment = require('moment-timezone');

// 9AM Broadcast (Manila Time) ‚Üí 1:00 AM UTC
cron.schedule('0 1 * * *', () => {
  if (!fs.existsSync(USERS_FILE)) return;

  const users = JSON.parse(fs.readFileSync(USERS_FILE));
  const messageText = dailyMessagesByDay[new Date().getDay()];
  const options = {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì≤ Go to Members Hub", url: "https://dreamkeepers.btncaliofficial.com" }]
      ]
    }
  };

  users.forEach(chatId => {
    bot.sendMessage(chatId, messageText, options);
  });

  const utcNow = moment.utc().format('YYYY-MM-DD HH:mm:ss');
  const manilaNow = moment().tz("Asia/Manila").format('YYYY-MM-DD HH:mm:ss');

  console.log(`üìÜ Sent 9AM (Manila) task message to ${users.length} users.`);
  console.log(`üïí Time now - UTC: ${utcNow}, Manila: ${manilaNow}`);
});

const moment = require('moment-timezone');

// 8PM Check-in (Manila Time) ‚Üí 12:00 PM UTC
cron.schedule('0 12 * * *', () => {
  if (!fs.existsSync(USERS_FILE)) return;

  const users = JSON.parse(fs.readFileSync(USERS_FILE));
  const messageText =
    eveningCheckIns[Math.floor(Math.random() * eveningCheckIns.length)] +
    `\n\nüëâ Tap below to revisit your tasks or reconnect üíô`;

  const options = {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì≤ Go to Fan Hub", url: "https://dreamkeepers.btncaliofficial.com" }]
      ]
    }
  };

  users.forEach(chatId => {
    bot.sendMessage(chatId, messageText, options);
  });

  const utcNow = moment.utc().format('YYYY-MM-DD HH:mm:ss');
  const manilaNow = moment().tz("Asia/Manila").format('YYYY-MM-DD HH:mm:ss');

  console.log(`üåô Sent 8PM (Manila) check-in to ${users.length} users.`);
  console.log(`üïí Time now - UTC: ${utcNow}, Manila: ${manilaNow}`);
});

// üìÖ Google Sheet Event Reminders
const EVENT_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTddey2pYPf7EV0nEQfv1fUMmHMctWLxH1itFA1SjThWu4ygpNUDxM021-L38c2F1C8HufC51I8FPw3/pub?output=csv";

cron.schedule('*/5 * * * *', () => {
  const currentUTC = new Date();
  const currentDate = currentUTC.toISOString().split('T')[0];
  const currentTime = currentUTC.toISOString().split('T')[1].substring(0, 5);
  const events = [];

  https.get(EVENT_CSV_URL, (res) => {
    res.pipe(csv())
      .on('data', (row) => {
        if (row["Date"] === currentDate && row["Time"] === currentTime) {
          events.push(row["Message"]);
        }
      })
      .on('end', () => {
        if (events.length && fs.existsSync(USERS_FILE)) {
          const users = JSON.parse(fs.readFileSync(USERS_FILE));
          events.forEach(msgText => {
            users.forEach(chatId => {
              bot.sendMessage(chatId, `üì£ *Event Reminder!*\n\n${msgText}`, {
                parse_mode: "Markdown"
              });
            });
            console.log(`üìÖ Sent reminder: ${msgText}`);
          });
        }
      });
  });
});

// üîò BOT COMMANDS
bot.onText(/\/start/, (msg) => {
  saveUser(msg.chat.id);
  bot.sendMessage(msg.chat.id, `üëã Hey ${msg.from.first_name || "DreamKeeper"}! Welcome to *BTN Cali Official*! üíô\n\nUse /menu to see what I can do.`, {
    parse_mode: "Markdown",
    ...mainMenuKeyboard
  });
});

bot.onText(/\/getchatid/, (msg) => {
  bot.sendMessage(msg.chat.id, `üÜî *Your Chat ID is:* \`${msg.chat.id}\`\n\nPaste this into your profile at dreamkeepers.btncaliofficial.com.`, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚öíÔ∏èüîî Setup Notifications", url: "https://dreamkeepers.btncaliofficial.com/settings" }]
      ]
    }
  });
});

bot.onText(/\/menu/, (msg) => {
  bot.sendMessage(msg.chat.id, `
üìã *Cali Bot Menu*

/start ‚Äì üëã Welcome message  
/menu ‚Äì üìã Show commands  
/getchatid ‚Äì üÜî Get your Telegram Chat ID  
/profile ‚Äì üì∏ About BTN Cali Official  
/support ‚Äì üõ†Ô∏è Need Help?  
/links ‚Äì üîó Official links  
/notifications ‚Äì üîî Alerts info  
/listusers ‚Äì üë• View saved users (admin)  
/removeuser [chatId] ‚Äì ‚ùå Remove user (admin)  
/broadcast ‚Äì üó£Ô∏è Preview message (admin only)  
/broadcastall [message] ‚Äì üì¢ Send to all users
`, { parse_mode: "Markdown", ...mainMenuKeyboard });
});

bot.onText(/\/profile/, (msg) => {
  bot.sendMessage(msg.chat.id, `
üì∏ *BTN Cali Official*

We‚Äôre a fan-driven support hub for Cali‚Äôs journey on *Be The Next 9 Dreamers*.  
Join us in tasks, voting, media, and uplifting Cali's dream! üíô
`, { parse_mode: "Markdown", ...mainMenuKeyboard });
});

bot.onText(/\/support/, (msg) => {
  bot.sendMessage(msg.chat.id, `
‚ùì *Need Help?*

üì© Email: hello@btncaliofficial.com  
We‚Äôre here for you, Cali DreamKeeper! üíô
`, { parse_mode: "Markdown", ...mainMenuKeyboard });
});

bot.onText(/\/links/, (msg) => {
  bot.sendMessage(msg.chat.id, `
üîó *BTN Cali Official Links*

üì∏ Instagram: https://instagram.com/btncaliofficial  
üê¶ X: https://x.com/btncaliofficial  
üì∫ YouTube: https://youtube.com/@btncaliofficial  
üì≤ Vote App: https://btnvote.com  
üåê Website: https://btncaliofficial.com  
üßë‚Äçü§ù‚Äçüßë Hub: https://dreamkeepers.btncaliofficial.com
`, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "üåê Visit Website", url: "https://btncaliofficial.com" }],
        [{ text: "üßë‚Äçü§ù‚Äçüßë Members Hub", url: "https://dreamkeepers.btncaliofficial.com" }]
      ]
    }
  });
});

bot.onText(/\/notifications/, (msg) => {
  bot.sendMessage(msg.chat.id, `
üîî *Notifications Guide*

Get daily reminders, evening check-ins, and task alerts from us!  
Use /getchatid and paste it into your profile settings at the Members Hub. üíô
`, { parse_mode: "Markdown", ...mainMenuKeyboard });
});

// üîí Admin Only Commands
bot.onText(/\/listusers/, (msg) => {
  if (!isAdmin(msg.from.id)) return;
  if (!fs.existsSync(USERS_FILE)) return bot.sendMessage(msg.chat.id, 'No users found.');
  const users = JSON.parse(fs.readFileSync(USERS_FILE));
  bot.sendMessage(msg.chat.id, `üë• *Saved Users:* ${users.length}\n\n\`${users.join('\n')}\``, {
    parse_mode: "Markdown"
  });
});

bot.onText(/\/removeuser (.+)/, (msg, match) => {
  if (!isAdmin(msg.from.id)) return;
  const chatIdToRemove = match[1];
  if (!fs.existsSync(USERS_FILE)) return;
  let users = JSON.parse(fs.readFileSync(USERS_FILE));
  users = users.filter(id => id !== chatIdToRemove);
  fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
  bot.sendMessage(msg.chat.id, `‚ùå Removed user: \`${chatIdToRemove}\``, { parse_mode: "Markdown" });
});

bot.onText(/\/broadcast$/, (msg) => {
  if (!isAdmin(msg.from.id)) return;
  bot.sendMessage(msg.chat.id, 'üó£Ô∏è Reply with the message you want to broadcast to all users. I‚Äôll wait for your next message.');
  bot.once('message', (reply) => {
    const broadcastMsg = reply.text;
    if (!fs.existsSync(USERS_FILE)) return;
    const users = JSON.parse(fs.readFileSync(USERS_FILE));
    users.forEach(chatId => {
      bot.sendMessage(chatId, `üì¢ *Broadcast:*\n\n${broadcastMsg}`, { parse_mode: "Markdown" });
    });
    bot.sendMessage(msg.chat.id, `‚úÖ Broadcast sent to ${users.length} users.`);
  });
});

bot.onText(/\/broadcastall (.+)/, (msg, match) => {
  if (!isAdmin(msg.from.id)) return;
  const messageToSend = match[1];
  if (!fs.existsSync(USERS_FILE)) return;
  const users = JSON.parse(fs.readFileSync(USERS_FILE));
  users.forEach(chatId => {
    bot.sendMessage(chatId, `üì¢ *Broadcast:*\n\n${messageToSend}`, { parse_mode: "Markdown" });
  });
  bot.sendMessage(msg.chat.id, `‚úÖ Broadcast sent to ${users.length} users.`);
});